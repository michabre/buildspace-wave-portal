{"version":3,"sources":["theme.js","helpers/shortenAddress.js","components/layout/Header.js","components/layout/Footer.js","components/Messages/Message.js","components/Notification/Notification.js","components/WaveStats.js","App.js","index.js"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","fonts","heading","body","shortenAddress","address","substring","length","Header","mode","current","account","connect","icon","p","as","fontSize","variant","spacing","leftIcon","onClick","Footer","bg","h","pt","align","justify","color","Message","obj","borderWidth","borderRadius","overflow","my","w","m","listStyleType","timestamp","toString","message","levels","success","error","warning","Notification","level","alignItems","WaveStats","count","winners","status","App","provider","signer","wavePortalContract","useColorMode","colorMode","toggleColorMode","useState","currentAccount","setCurrentAccount","waveCount","setWaveCount","setWinners","setStatus","setMessage","allWaves","setAllWaves","notificationMessage","setNotificationMessage","notificationLevel","setNotificationLevel","contractABI","abi","useEffect","checkIfWalletIsConnected","getAllWaves","a","window","ethereum","ethers","providers","Web3Provider","getSigner","Contract","getTotalWaves","getNumberOfWinners","numberOfWinners","toNumber","request","method","accounts","console","log","connectWallet","wave","waveTxn","wait","events","prizeAwarded","PrizeAwarded","values","returnValues","waves","wavesCleaned","map","waver","Date","onNewWave","from","prevState","onPrizeAwarded","user","time","note","on","off","maxW","padding","py","value","onChange","event","text","target","placeholder","size","borderTopWidth","borderBottomWidth","borderColor","index","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c9c7f83.chunk.js","sourcesContent":["// theme.ts\r\n\r\n// 1. import `extendTheme` function\r\nimport { extendTheme } from '@chakra-ui/react'\r\n\r\n// 2. Add your color mode config\r\nconst config = {\r\n  initialColorMode: 'dark',\r\n  useSystemColorMode: false,\r\n}\r\n\r\n// 3. extend the theme\r\nconst theme = extendTheme({\r\n  config,\r\n  fonts: {\r\n    heading: 'Orelega One',\r\n    body: 'Roboto',\r\n  }\r\n})\r\n\r\nexport default theme","const shortenAddress = (address) => {\r\n  return address.substring(0, 6) + \"...\" + address.substring(address.length - 4);\r\n}\r\nexport default shortenAddress","import * as React from 'react'\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  Spacer\r\n} from '@chakra-ui/react'\r\n\r\nimport { LockIcon, MoonIcon, SunIcon, StarIcon} from '@chakra-ui/icons'\r\n\r\nimport shortenAddress from '../../helpers/shortenAddress'\r\n\r\nconst Header = ({ mode, current, account, connect }) => { \r\n  let icon = current === 'light' ? <SunIcon /> : <MoonIcon />\r\n  return (\r\n      <Flex>\r\n        <Box p='4'>\r\n          <Heading as='h1' fontSize='20px'>Wave Portal</Heading>\r\n        </Box>\r\n        <Spacer />\r\n        <Box p='4'>\r\n        <ButtonGroup variant='outline' spacing='2'>\r\n          {!account && (\r\n            <Button leftIcon={<StarIcon />} onClick={connect}>\r\n              Connect\r\n            </Button>\r\n          )}\r\n          {account && (\r\n            <Button leftIcon={<LockIcon />}>\r\n              {shortenAddress(account)}\r\n            </Button>\r\n          )}\r\n            <Button leftIcon={icon} onClick={mode}>\r\n            I prefer the&nbsp;<strong>{current}</strong>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Box>\r\n      </Flex>\r\n  )\r\n}\r\n\r\nexport default Header","import * as React from 'react'\r\nimport { Flex, Text } from '@chakra-ui/react'\r\n\r\nconst Footer = () => { \r\n  return (\r\n    <Flex bg='gray.800' h='30vh' pt='5' align='center' justify='center'>\r\n      <Text color='gray.200'>Made by Lakwatzero</Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\n\r\nimport {\r\n  Box, \r\n  UnorderedList,\r\n  ListItem } from '@chakra-ui/react'\r\n\r\nconst Message = ({ obj }) => {\r\n  return (\r\n    <Box borderWidth='1px' borderRadius='lg' overflow='hidden' p='5' my='5' spacing='3' w='80%'>\r\n      <UnorderedList m='0' listStyleType='none'>\r\n        <ListItem><strong>Address:</strong> {obj.address}</ListItem>\r\n        <ListItem><strong>Time:</strong> {obj.timestamp.toString()}</ListItem>\r\n        <ListItem><strong>Message:</strong> {obj.message}</ListItem>\r\n      </UnorderedList>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Message","import React from 'react';\r\n\r\nimport { \r\n  Box, \r\n  HStack, \r\n  Text,\r\n} from '@chakra-ui/react'\r\n\r\nimport { InfoIcon } from '@chakra-ui/icons'\r\n\r\nconst levels = {\r\n  success: 'green.100',\r\n  error: 'orange.200',\r\n  warning: 'yellow.200',\r\n}\r\n\r\nconst Notification = ({ level, message }) => {\r\n  return (\r\n    <Box bg={levels[level]} w='100%' my={5} p={4} color='black'>\r\n      <HStack alignItems='center'>\r\n        <InfoIcon /><Text>{message}</Text>\r\n      </HStack>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Notification;","import React from 'react'\r\n\r\nimport {\r\n  Stat,\r\n  StatLabel,\r\n  StatNumber,\r\n  StatGroup\r\n} from '@chakra-ui/react'\r\n\r\nconst WaveStats = ({ count, winners, status }) => {\r\n  return (\r\n<StatGroup>\r\n  <Stat>\r\n    <StatLabel>Number of Waves</StatLabel>\r\n    <StatNumber>{count}</StatNumber>\r\n  </Stat>\r\n\r\n  <Stat>\r\n    <StatLabel>Number of Winners</StatLabel>\r\n    <StatNumber>{winners}</StatNumber>\r\n  </Stat>\r\n\r\n  <Stat>\r\n    <StatLabel>Status</StatLabel>\r\n    <StatNumber>{status}</StatNumber>\r\n  </Stat>\r\n</StatGroup>\r\n  )\r\n}\r\n\r\nexport default WaveStats","import React, { useEffect, useState } from \"react\"\r\nimport { \r\n  ColorModeScript, \r\n  useColorMode, \r\n  Box, \r\n  Button, \r\n  Center,\r\n  Container, \r\n  Flex, \r\n  HStack,\r\n  VStack, \r\n  Heading, \r\n  Text,\r\n  Textarea } from '@chakra-ui/react'\r\nimport { ethers } from \"ethers\"\r\nimport theme from './theme'\r\nimport Header from \"./components/layout/Header\"\r\nimport Footer from \"./components/layout/Footer\"\r\nimport Message from \"./components/Messages/Message\"\r\nimport Notification from \"./components/Notification/Notification\"\r\nimport './App.css'\r\n\r\nimport abi from \"./utils/WavePortal.json\"\r\nimport WaveStats from \"./components/WaveStats\"\r\n\r\nexport default function App() {\r\n  let provider;\r\n  let signer;\r\n  let wavePortalContract;\r\n\r\n  const { colorMode, toggleColorMode } = useColorMode()\r\n  const [currentAccount, setCurrentAccount] = useState(\"\")\r\n  const [waveCount, setWaveCount] = useState(0)\r\n  const [winners, setWinners] = useState(0)\r\n  const [status, setStatus] = useState(\"No active transaction\")\r\n  const [message, setMessage] = useState(\"\")\r\n  const [allWaves, setAllWaves] = useState([])\r\n  const [notificationMessage, setNotificationMessage] = useState(\"\")\r\n  const [notificationLevel, setNotificationLevel] = useState(\"\")\r\n\r\n  const contractAddress = \"0x893481044652b109058AefcB17b22C4D5DF88a74\"\r\n  const contractABI = abi.abi\r\n\r\n  /*\r\n  * This runs our function when the page loads.\r\n  */\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    getAllWaves();\r\n  })\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        return;\r\n      } else {        \r\n        provider = new ethers.providers.Web3Provider(ethereum);\r\n        signer = provider.getSigner();\r\n        wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        let numberOfWinners = await wavePortalContract.getNumberOfWinners();\r\n        setWaveCount(count.toNumber());\r\n        setWinners(numberOfWinners.toNumber());\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        setCurrentAccount(account)\r\n      } else {\r\n        setNotificationMessage(\"No authorized account found\")\r\n        setNotificationLevel(\"warning\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Implement your connectWallet method here\r\n  */\r\n   const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        setNotificationMessage(\"No wallet found. Get MetaMask!\")\r\n        setNotificationLevel(\"warning\")\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const wave = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {        \r\n        let count = await wavePortalContract.getTotalWaves();\r\n        setWaveCount(count.toNumber());\r\n\r\n        const waveTxn = await wavePortalContract.wave(message);\r\n        setStatus('Mining in Progress...')\r\n\r\n        await waveTxn.wait();\r\n        setStatus('Mined')\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        setWaveCount(count.toNumber());\r\n        let numberOfWinners = await wavePortalContract.getNumberOfWinners();\r\n\r\n        if (waveTxn.events === true) {\r\n          let prizeAwarded = waveTxn.events.PrizeAwarded;\r\n          let values = prizeAwarded.returnValues;\r\n          console.log(values);\r\n        }\r\n\r\n        setWinners(numberOfWinners.toNumber());\r\n        setStatus('Completed')\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const getAllWaves = async () => {\r\n    const { ethereum } = window;\r\n  \r\n    try {\r\n      if (ethereum) {\r\n        const waves = await wavePortalContract.getAllWaves();\r\n  \r\n        const wavesCleaned = waves.map(wave => {\r\n          return {\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n          };\r\n        });\r\n  \r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Listen in for emitter events!\r\n   */\r\n  useEffect(() => {  \r\n    const onNewWave = (from, timestamp, message) => {\r\n      setAllWaves(prevState => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    const onPrizeAwarded = (user, time, note) => {\r\n      setNotificationMessage(`${user} won the prize at ${time}. ${note}`)\r\n      setNotificationLevel(\"success\")\r\n    }\r\n  \r\n    if (window.ethereum) {\r\n      wavePortalContract.on(\"NewWave\", onNewWave)\r\n      wavePortalContract.on(\"PrizeAwarded\", onPrizeAwarded)\r\n    }\r\n  \r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off(\"NewWave\", onNewWave)\r\n        wavePortalContract.off(\"PrizeAwarded\", onPrizeAwarded)\r\n      }\r\n    };\r\n  }, [wavePortalContract]);\r\n\r\n  const updateMessage = (event) => {\r\n    let text = event.target.value\r\n    setMessage(text)\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n      <Header mode={toggleColorMode} current={colorMode} account={currentAccount} connect={connectWallet} />\r\n      <Container maxW='container.md' pt='10'>\r\n        <Flex h='100%' align='center'>\r\n          <Box>\r\n            <VStack h='100%'>\r\n              {notificationMessage && <Notification level={notificationLevel} message={notificationMessage} />}\r\n              <Heading as='h2' fontSize='5xl'>Hello</Heading>\r\n              <Box padding='4'>\r\n                <Text fontSize='lg' align='center'>\r\n                  My name is Michael and this my first Buildspace project. Connect your Ethereum wallet and wave at me!\r\n                </Text>\r\n              </Box>\r\n            </VStack>\r\n          </Box>\r\n        </Flex>\r\n      </Container>\r\n\r\n      <Container maxW='container.md' py='10'>\r\n        <Flex h='100%' align='center'>\r\n          <Box w='100%'>\r\n            <HStack spacing='24px'>\r\n              <Box w='70%'>\r\n                <Textarea\r\n                  value={message}\r\n                  onChange={updateMessage}\r\n                  placeholder='Write a message and send a wave.'\r\n                  size='lg'\r\n                />\r\n              </Box>\r\n              <Box>\r\n              <Button onClick={wave}>\r\n                  Send\r\n                </Button>\r\n              </Box>\r\n            </HStack>\r\n          </Box>\r\n        </Flex>\r\n      </Container>\r\n\r\n      <Container maxW='container.md' py='5' borderTopWidth='1px' borderBottomWidth='1px' borderColor='gray.400'>\r\n        <Box w='100%'>\r\n          <WaveStats count={waveCount} winners={winners} status={status} />\r\n        </Box>\r\n      </Container>\r\n\r\n      <Container maxW='container.md' py='10'>\r\n        <Box>\r\n          <Heading as='h3' size='lg' align='center'>List of Waves</Heading>\r\n          {allWaves.map((wave, index) => {\r\n            return (\r\n              <Center key={index}>\r\n                <Message obj={wave} />\r\n              </Center>   \r\n            )\r\n          })}\r\n        </Box>  \r\n      </Container>\r\n\r\n      <Footer />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { ChakraProvider } from '@chakra-ui/react'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider>\r\n      <App />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}