{"version":3,"sources":["theme.js","components/layout/Header.js","components/layout/Footer.js","App.js","index.js"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","fonts","heading","body","Header","mode","current","account","connect","icon","h","p","as","fontSize","variant","spacing","leftIcon","onClick","Footer","status","waves","w","App","useColorMode","colorMode","toggleColorMode","useState","currentAccount","setCurrentAccount","waveCount","setWaveCount","setStatus","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","request","method","accounts","length","connectWallet","alert","useEffect","wave","waveTxn","hash","wait","maxW","align","padding","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb7125a4.chunk.js","sourcesContent":["// theme.ts\r\n\r\n// 1. import `extendTheme` function\r\nimport { extendTheme } from '@chakra-ui/react'\r\n\r\n// 2. Add your color mode config\r\nconst config = {\r\n  initialColorMode: 'dark',\r\n  useSystemColorMode: false,\r\n}\r\n\r\n// 3. extend the theme\r\nconst theme = extendTheme({\r\n  config,\r\n  fonts: {\r\n    heading: 'Orelega One',\r\n    body: 'Roboto',\r\n  }\r\n})\r\n\r\nexport default theme","import * as React from 'react'\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Box,\r\n  Flex,\r\n  Heading,\r\n  Spacer,\r\n  Menu\r\n} from '@chakra-ui/react'\r\n\r\nimport { MoonIcon, SunIcon, StarIcon} from '@chakra-ui/icons'\r\n\r\nconst Header = ({ mode, current, account, connect }) => { \r\n  let icon = current === 'light' ? <SunIcon /> : <MoonIcon />\r\n  return (\r\n      <Flex h='10vh'>\r\n        <Box p='4'>\r\n          <Heading as='h1' fontSize='20px'>Wave Portal</Heading>\r\n        </Box>\r\n        <Spacer />\r\n        <Box p='4'>\r\n        <ButtonGroup variant='outline' spacing='2'>\r\n          {!account && (\r\n          <Button leftIcon={<StarIcon />} onClick={connect}>\r\n            Connect\r\n          </Button>\r\n        )}\r\n            <Button leftIcon={icon} onClick={mode}>\r\n            I prefer the&nbsp;<strong>{current}</strong>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Box>\r\n      </Flex>\r\n  )\r\n}\r\n\r\nexport default Header","import * as React from 'react'\r\nimport { Box, Flex, UnorderedList, ListItem } from '@chakra-ui/react'\r\n\r\nconst Footer = ({status, waves}) => { \r\n  return (\r\n    <Flex h='30vh'>\r\n      <Box w='100%' p={4}>\r\n        <UnorderedList>\r\n          <ListItem>Wave Count: {waves}</ListItem>\r\n          <ListItem>Transaction Status: {status}</ListItem>\r\n        </UnorderedList>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Footer","import React, { useEffect, useState } from \"react\"\nimport { \n  ColorModeScript, \n  useColorMode, \n  Box, \n  Button, \n  Container, \n  Flex, \n  VStack, \n  Heading, \n  Text, \n  Tag } from '@chakra-ui/react'\nimport { ethers } from \"ethers\"\nimport theme from './theme'\nimport Header from \"./components/layout/Header\"\nimport Footer from \"./components/layout/Footer\"\n\nimport './App.css'\n\nimport abi from \"./utils/WavePortal.json\"\n\nexport default function App() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  const [currentAccount, setCurrentAccount] = useState(\"\")\n  const [waveCount, setWaveCount] = useState(0)\n  const [status, setStatus] = useState(\"No active transaction\")\n\n  const contractAddress = \"0xe4A174Bc043A7E7438b0f391eb07532CA11e80F7\"\n  const contractABI = abi.abi\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n        \n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        setWaveCount(count.toNumber());\n      }\n\n      /*\n      * Check if we're authorized to access the user's wallet\n      */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n   const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /*\n  * This runs our function when the page loads.\n  */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        \n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        setWaveCount(count.toNumber());\n\n        /*\n        * Execute the actual wave from your smart contract\n        */\n        const waveTxn = await wavePortalContract.wave();\n        console.log(\"Mining...\", waveTxn.hash);\n        setStatus('Mining in Progress...')\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        setStatus('Mined')\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        setWaveCount(count.toNumber());\n        setStatus('Completed')\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n  return (\n    <>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <Header mode={toggleColorMode} current={colorMode} account={currentAccount} connect={connectWallet} />\n      <Container maxW='container.md' h='60vh'>\n        <Flex h='100%' align='center'>\n          <Box>\n            <VStack h='100%'>\n          \n              <Heading as='h2'>ðŸ‘‹ Hey there!</Heading>\n\n              <Box padding='4'>\n                <Text fontSize='lg' align='center'>\n                  My name is Michael and this my first Buildspace project. Connect your Ethereum wallet and wave at me!\n                </Text>\n              </Box>\n\n              <Button onClick={wave}>\n                Wave at Me\n              </Button>\n\n            </VStack>\n          </Box>\n        </Flex>\n      </Container>\n      <Footer status={status} waves={waveCount} />\n    </>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}